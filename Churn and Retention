
--Data Quality

--7m 9s
--churn transactions from CB, Zuora and 2CO

create or replace temporary table churn_transactions as

SELECT 
   'Cleverbridge' as source,
  cb.items_recurring_billing_subscription_id AS subscription_id,
  cb.status as transaction_status,
  null as license_type,
  --cb.raw_meta_type AS meta_type,
  gm.geo_name as Territory,
  date(cb.last_modification_time) AS transaction_dt,
  cb.ITEMS_RECURRING_BILLING_NEXT_BILLING_DATE AS NEXT_BILLING_DT,
  payment_info_payment_type as payment_type,
  CAST(TRIM(cb.items_recurring_billing_interval_number) AS INTEGER) cohort_number,
  K.ID AS KEY_ID,
  lower(cb.licensee_email) as email,
  pm.product_name,
  case 
    when pm.product_id like '%MBAMVPN%' then 'Bundle'
    when pm.product_id like '%VPN%' Then 'Privacy'
    when upper(pm.Product_Type) like '%TEAM%' then 'Teams'
    when upper(pm.Product_Type) = 'B2B' then pm.product_name
    when upper(pm.Product_Type) = 'B2C' then 'Premium'
    else '-'
  end as product_name_2,
  cast(im.interval_output as varchar(50)) as cohort_name,
  pm.Product_Type,
  CASE    
    WHEN cb.items_product_id = '195396' THEN 'B2C 2 yr/2 yr'
    WHEN pm.product_group_id IN ('5543','5545','5910','5911','6246','5539','5541') THEN 'B2C 2 yr/1 yr'
    WHEN pm.product_group_id IN ('6334') THEN 'Team MB3 2 yr/1 yr'
    WHEN pm.product_group_id IN ('6332') THEN 'B2C 2 yr/2 yr'
    WHEN pm.product_group_id IN ('5557','5558','5912','5913') THEN 'B2C 3 yr/1 yr'
    WHEN pm.product_group_id IN ('5559','5560') THEN 'B2B 3 yr/1 yr'
    WHEN pm.product_group_id IN ('5556','5555') THEN 'B2C 18 month/1 yr'
    ELSE pm.Dashboard_Grp_Name
  END AS Group_Name,
  pm.subscription_months,
  gm.country_cd,
  COALESCE(date(cb_cohort.cohort_month), date(last_modification_time)) AS cohort_month,
  cb.PURCHASE_ID as purchase_ref_id,
  cb.items_product_id as purchase_product_id,
  cb.items_your_currency_id AS PAYMENT_CURRENCY,
  CC.LANGUAGE_ID,
  cb.ITEMS_QUANTITY as quantity,
  null as acv
FROM  
  "DM_SALES"."CB_BILLING_USD_CDS" cb 
  LEFT JOIN 
  ( 
    SELECT
      COALESCE(UPPER(subscription_id), UPPER(transaction_id)) as sub_id, 
      id 
    from 
      "CDS_PROD"."DM_PRODUCT"."CORE_CORE_KEYSTONE_KEYS" QUALIFY ROW_NUMBER() OVER (PARTITION BY COALESCE(upper(subscription_id), upper(transaction_id)) ORDER BY UPDATE_DT DESC) = 1  -- select top 100 * from "CDS_PROD"."DM_PRODUCT"."CORE_CORE_KEYSTONE_KEYS"
  ) K ON cb.items_recurring_billing_subscription_id = k.sub_id
  LEFT JOIN 
    (
      SELECT 
        items_recurring_billing_subscription_id,
        MIN(last_modification_time) AS cohort_month
      FROM 
       "CDS_PROD"."DM_SALES"."CB_BILLING_USD_CDS" --"MARVIN"."CORE_SALES_STATE"."VW_CB_BILLING_USD"  select top 100 * from  "DM_SALES"."CB_BILLING_USD_CDS"
      WHERE 
        year(last_modification_dt) >= '2014'
        AND   meta_type <> 'OnlinePaymentDeclined'
        --AND   items_recurring_billing_next_billing_date <> ''
        AND   items_recurring_billing_next_billing_date IS NOT NULL
        AND   status = 'Paid'
      GROUP BY 1
    ) cb_cohort ON cb.items_recurring_billing_subscription_id = cb_cohort.items_recurring_billing_subscription_id
    LEFT OUTER JOIN "CDS_PROD"."CDS"."UD_B2C_PRODUCT_MAPPING_CDS" pm ON (cb.items_product_id = pm.product_id)
    LEFT JOIN "MARVIN"."CORE_USER_UPLOAD"."VW_SUBS_INTERVAL_MAPPING" im ON (TRIM (cb.items_recurring_billing_interval_number) = im.cb_interval_input)
    LEFT JOIN  
      (
        SELECT 
          email,
          country_id,
          language_id,
          Row_number() OVER (PARTITION BY email ORDER BY last_modification_time desc) rnk
        FROM 
          "CDS_PROD"."DM_SALES"."CB_CONTACTS_CDS"    -- select top 100 * from  "CDS_PROD"."DM_SALES"."CB_CONTACTS_CDS"
        WHERE contact_type = 'licenseeContact'
      ) cc on  (cb.licensee_email = cc.email and rnk = 1)
    LEFT JOIN  
    (
      select distinct 
        upper(country_cd) country_cd,
        geo_name
      FROM
        "CDS_PROD"."DM_SALES"."UD_SF_COUNTRY_GEO_MAPPING_CDS"
    )gm on upper(cc.country_id) = gm.country_cd  
      WHERE 
        cb.status_id <> 'TST'
        AND  cb.status not IN ('Charged Back', 'Partial Refunded', 'REFUND', 'Refunded', 'COMPLETE', 'Completed', 'Paid')
        AND  year(cb.last_modification_dt) >= '2014'
        AND  pm.Product_Type <> ''
        AND  pm.product_type IN ('B2C','B2B','Team MB3 Self-Serve')

UNION  
  
SELECT 
  '2Checkout' as source,
  ipn.ipn_license_ref as subscription_id,
  ipn.orderstatus as transaction_status,
  ipn_license_type,
  gm.geo_name as Territory,
  CASE
    WHEN substr (complete_date,1,10) = '0000-00-00' THEN CONCAT (SUBSTR (ipn_date,1,4),'-',SUBSTR (ipn_date,5,2),'-',SUBSTR (ipn_date,7,2),' ',SUBSTR(ipn_date,9,2),':',SUBSTR(ipn_date,11,2),':',SUBSTR(ipn_date,13,2) ) 
    ELSE complete_date
  END AS Transaction_dt,
  ipn.IPN_LICENSE_EXP AS NEXT_BILLING_DT,
  ipn.paymethod AS payment_type,
  CAST(TRIM(CASE WHEN lcn.billing_cycles IS NULL THEN '1' ELSE lcn.billing_cycles END) AS INTEGER) cohort_number,
  k.id as key_id,
  lower(ipn.customeremail) as email,
  pm.product_name,
  case 
    when pm.product_id like '%MBAMVPN%' then 'Bundle'
    when pm.product_id like '%VPN%' Then 'Privacy'
    when upper(pm.Product_Type) like '%TEAM%' then 'Teams'
    when upper(pm.Product_Type) = 'B2B' then pm.product_name
    when upper(pm.Product_Type) = 'B2C' then 'Premium'
    else '-'
  end as product_name_2,
  im.interval_output AS cohort_name,
  pm.Product_Type,
  CASE
    WHEN ipn_sku like '%CB%' THEN 'CB IMPORT ' || pm.Dashboard_Grp_Name
    WHEN ipn_sku in ('MBHSC-C-RETAIL-HB-1Y','MBHSC-C-RETAIL-PC-1Y') THEN 'RETAIL CONV 1 YR'
    WHEN ipn_sku in ('MBHSC-C-RETAIL-HB-2Y','MBHSC-C-RETAIL-PC-2Y') THEN 'RETAIL CONV 2 YR'
    WHEN ipn_license_type = 'UPGRADE' AND pm.Dashboard_Grp_Name = 'B2C 2 Year' THEN 'UPGRADE B2C 2 Yr/2 Yr'
    WHEN ipn_license_type = 'UPGRADE' THEN 'UPGRADE ' || pm.Dashboard_Grp_Name
    WHEN pm.Dashboard_Grp_Name = 'B2C 2 Year' THEN 'B2C 2 Yr/2 Yr'
    ELSE pm.Dashboard_Grp_Name
    END AS Group_Name,
  pm.subscription_months,
  gm.country_cd,
  substr(cohort_month,1,10) AS Cohort_Month,
  ipn.REFNO as purchase_ref_id,
  ipn.IPN_LICENSE_PROD as purchase_product_id,
  ipn.PAYOUT_CURRENCY as PAYMENT_CURRENCY,
  ipn.LANGUAGE AS LANGUAGE_ID,
  ipn.max_qty as quantity,
  null as acv
FROM 
    "MARVIN"."CORE_SALES"."VW_AG_INSTANT_PAYMENT_NOTIFICATION" ipn    
  LEFT JOIN 
  ( 
    SELECT 
      COALESCE(UPPER(subscription_id), UPPER(transaction_id)) as sub_id, 
      id  
    from 
      "CDS_PROD"."DM_PRODUCT"."CORE_CORE_KEYSTONE_KEYS" QUALIFY ROW_NUMBER() OVER (PARTITION BY COALESCE(upper(subscription_id), upper(transaction_id)) ORDER BY UPDATE_DT DESC) = 1 
  ) K ON ipn.ipn_license_ref = k.sub_id
  LEFT OUTER JOIN 
  (
    SELECT 
      ipn_license_ref,
      MIN(complete_date) AS cohort_month
    FROM  
      "MARVIN"."CORE_SALES"."VW_AG_INSTANT_PAYMENT_NOTIFICATION" ipn
    WHERE 
      (test_order <> '1' OR test_order IS NULL)
      AND   orderstatus = 'COMPLETE'
      AND   chargeback_resolution NOT IN ('LOST','ACCEPTED')
      AND   complete_date != '0000-00-00 00:00:00'
  GROUP BY 1
  ) ag_cohort ON ipn.ipn_license_ref = ag_cohort.ipn_license_ref
  LEFT OUTER JOIN
  (
  select 
    last_order_reference, 
    license_code,
  MAX(billing_cycles) AS billing_cycles,
  array_contains('ACTIVE'::variant,array_agg(status)) as status_active,
  array_contains('CANCELED'::variant,array_agg(status)) as status_canceled,
  array_contains('PASTDUE'::variant,array_agg(status)) as status_pastdue 
  from 
    "MARVIN"."CORE_SALES"."VW_AG_LICENSE_CHANGE_NOTIFICATION"
  WHERE 
      (test != '1' OR test IS NULL)
  group by 1,2
  ) lcn 
    ON (lcn.license_code = ipn.ipn_license_ref
    AND lcn.last_order_reference = ipn.refno)
  LEFT OUTER JOIN "MARVIN"."CORE_USER_UPLOAD"."VW_EXCHANGE_RATE" xr
    ON (SUBSTR (ipn.complete_date,1,10) = xr.ex_date
    AND ipn.payout_currency = xr.currency_id)
  LEFT OUTER JOIN "CDS_PROD"."CDS"."UD_B2C_PRODUCT_MAPPING_CDS" pm
    ON (ipn.ipn_sku = pm.product_id)
  LEFT OUTER JOIN "MARVIN"."CORE_USER_UPLOAD"."VW_SUBS_INTERVAL_MAPPING" im 
    ON TRIM (CASE WHEN lcn.billing_cycles IS NULL THEN '1' ELSE lcn.billing_cycles END) = im.av_interval_input
  LEFT OUTER JOIN 
    (
      SELECT distinct 
        email_d,
        country_code,
        ROW_NUMBER() OVER (PARTITION BY email_d ORDER BY IPN_DATE desc) rnk
      FROM "MARVIN"."CORE_SALES"."VW_AG_INSTANT_PAYMENT_NOTIFICATION"
    ) cc on ipn.email_d = cc.email_d
      and rnk = 1
  LEFT JOIN 
  (
    select distinct 
      upper(country_cd) as country_cd,
      geo_name
    FROM 
     "CDS_PROD"."DM_SALES"."UD_SF_COUNTRY_GEO_MAPPING_CDS" 
   )gm
    on upper(cc.country_code) = gm.country_cd
  WHERE 
    (test_order != '1' OR test_order IS NULL)
  AND ipn.orderstatus not IN ('Charged Back', 'Partial Refunded', 'REFUND', 'Refunded', 'COMPLETE', 'Completed', 'Paid')
  AND pm.product_type IN ('B2C','B2B','Team MB3 Self-Serve')
  AND lcn.license_code IS NOT NULL

/* 

UNION 

SELECT 
    'Zuora' as source,
    SUB.NAME as subscription_id,
    ORD.STATUS as transaction_status,
    --ORD.ORDERTYPE__C  as SUBSCRIBER_NEW_RENEWAL_TXT,
    gm.geo_name as territory,
    TRANSACTIONS.TRANSACTION_DT AS TRANSACTION_DT, 
    TRANSACTIONS.NEXT_BILLING_DT AS NEXT_BILLING_DT,
    PM.TYPE AS PAYMENT_TYPE,
    SUB.RENEWALCOUNT__C as cohort_number,
     K.ID as key_id,
    ACC.EMAILID__C  as email,
     TRANSACTIONS.PRODUCT_NAME as product_name,
    CASE 
        WHEN lower(TRANSACTIONS.PRODUCT_NAME) LIKE '%teams%' then 'Teams'
        WHEN lower(TRANSACTIONS.PRODUCT_NAME) LIKE '%privacy%' then 'Privacy' 
        WHEN lower(TRANSACTIONS.PRODUCT_NAME) LIKE '%premium%' then 'Premium'
        ELSE NULL
    END as product_name_2,
     im.interval_output as cohort_name,
     ACC.ACCOUNTTYPE__C as product_type,
      'Zuora' as group_name,
     (SUB.CURRENTTERM::int/30)::int as subscription_months,
    ORD.Country__C as country_cd
    NULL as cohort_month,
    --LEFT(ZO.CREATEDDATE,19) AS TRANSACTION_DT,
    ORD.ID as purchase_ref_id,
    '' as purchase_product_id, 
   TRANSACTIONS.PAYMENT_CURRENCY,
    'en' AS LANGUAGE_ID,
    SUM(TRANSACTIONS.QUANTITY) as QUANTITY
    SUM(ROUND((TRANSACTIONS.BILLINGS)/(SUB.CURRENTTERM::int/30)::int * 12,2)) as ACV  
FROM
(
  (
    SELECT
    INV.ACCOUNTID         AS ACCOUNTID,
    INV.ID                AS ID,
    INV.INVOICENUMBER     AS TRANSACTION_NUMBER,
    DATE(INV.CREATEDDATE) AS TRANSACTION_DT,
    INV.TARGETDATE        AS NEXT_BILLING_DT,
    INV.CREATEDDATE       AS TRANSACTION_TIMEZONE_OFFSET,
    INV_I.CHARGENAME      AS PRODUCT_NAME,
    INV_I.CHARGEAMOUNT + INV_I.TAXAMOUNT
                          AS BILLINGS,
    INV_I.QUANTITY        AS QUANTITY,
    INV_I.SUBSCRIPTIONID  AS SUBSCRIPTIONID,
    INV_I.RATEPLANCHARGEID AS RATEPLANCHARGEID,
    INV.TRANSACTIONCURRENCY AS PAYMENT_CURRENCY
  FROM "CDS_PROD"."DM_SALES"."ZR_INVOICE_CDS" inv
  LEFT JOIN "CDS_PROD"."DM_SALES"."ZR_INVOICEITEM_CDS" INV_I ON INV.ID = INV_I.INVOICEID
  )
  
  UNION
  (--- CREDIT MEMOS
    SELECT
      CM.ACCOUNTID          AS ACCOUNTID,
      CM.ID                 AS ID,
      CM.MEMONUMBER         AS TRANSACTION_NUMBER,
      DATE(CM.CREATEDDATE)  AS TRANSACTION_DT,    
      CM.TARGETDATE         AS NEXT_BILLING_DT,
      CM.CREATEDDATE        AS TRANSACTION_TIMEZONE_OFFSET,
      CM_I.CHARGENAME       AS PRODUCT_NAME,
      -1*(CM_I.AMOUNTWITHOUTTAX + CM_I.TAXAMOUNT) AS BILLINGS, 
      CM_I.QUANTITY         AS QUANTITY,
      CM_I.SUBSCRIPTIONID   AS SUBSCRIPTIONID,
      CM_I.RATEPLANCHARGEID AS RATEPLANCHARGEID,
      CM.TRANSACTIONCURRENCY AS PAYMENT_CURRENCY 
    FROM "CDS_PROD"."DM_SALES"."ZR_CREDITMEMO_CDS" CM
    LEFT JOIN "CDS_PROD"."DM_SALES"."ZR_CREDITMEMOITEM_CDS" CM_I ON CM_I.CREDITMEMOID = CM.ID
    ) 
) AS TRANSACTIONS

  LEFT JOIN "CDS_PROD"."DM_SALES"."ZR_SUBSCRIPTION_CDS" SUB ON SUB.ID = TRANSACTIONS.SUBSCRIPTIONID
  LEFT JOIN "CDS_PROD"."DM_SALES"."ZR_ORDERITEM_CDS" ORD_I ON ORD_I.SUBSCRIPTIONID = SUB.ID 
  LEFT JOIN "CDS_PROD"."DM_SALES"."ZR_ORDER_CDS" ORD ON ORD.ID = ORD_I.ORDERID
  LEFT JOIN "CDS_PROD"."DM_SALES"."ZR_RATEPLANCHARGE_CDS" RPC ON RPC.ID = TRANSACTIONS.RATEPLANCHARGEID  
  LEFT JOIN "CDS_PROD"."DM_SALES"."ZR_ACCOUNT_CDS" ACC ON ACC.ID = TRANSACTIONS.ACCOUNTID
  LEFT JOIN "CDS_PROD"."DM_SALES"."ZR_PAYMENTMETHOD_CDS" PM ON PM.ACCOUNTID = TRANSACTIONS.ACCOUNTID

  LEFT JOIN 
  (
    SELECT 
      COALESCE(UPPER(subscription_id), UPPER(transaction_id)) AS sub_id, 
      id  
    FROM "CDS_PROD"."DM_PRODUCT"."CORE_CORE_KEYSTONE_KEYS" QUALIFY ROW_NUMBER() OVER (PARTITION BY COALESCE(upper(subscription_id), upper(transaction_id)) ORDER BY UPDATE_DT DESC) = 1 
  ) K 
    ON SUB.NAME=K.sub_id          
  LEFT JOIN "MARVIN"."CORE_USER_UPLOAD"."VW_SUBS_INTERVAL_MAPPING" im ON SUB.RENEWALCOUNT__C = im.cb_interval_input
  LEFT JOIN 
  (
    SELECT DISTINCT 
     upper(country_cd) country_cd,
     geo_name 
    FROM "CDS_PROD"."DM_SALES"."UD_SF_COUNTRY_GEO_MAPPING_CDS"
  )gm ON ORD.Country__C = gm.country_cd
GROUP BY
  1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25
 
*/
;

create or replace temporary table all_churn_transactions as

select distinct
  cast(ch.SOURCE as varchar) as TRANSACTION_SOURCE,
  cast(ch.KEY_ID as varchar) as key_id,
  cast(ch.SUBSCRIPTION_ID as varchar) as subscription_id,
  cast(ch.EMAIL as varchar) as email,
  cast(ch.COHORT_MONTH as varchar) as cohort_month,
  DATE(ch.TRANSACTION_DT) as TRANSACTION_DATE,
  DATE(ch.NEXT_BILLING_DT) as ADDRESSABLE_DATE,
  CAST(ch.PAYMENT_TYPE AS VARCHAR) AS PAYMENT_TYPE,
  cast(ch.TERRITORY as varchar) as territory,
  CAST(ch.COHORT_NUMBER AS NUMBER) AS COHORT_NUMBER,
  cast(ch.COHORT_NAME as varchar) as cohort_name,
  cast(ch.PRODUCT_TYPE as varchar) as product_type,
  case 
    when TRANSACTION_STATUS in ('PENDING_APPROVAL', 'Pending', 'PENDING') then 'Pending'  
    else transaction_status 
  end as transaction_status,
  cast(ch.LICENSE_TYPE as varchar) as license_type,
  cast(ch.GROUP_NAME as varchar) as group_name,
  CAST(ch.SUBSCRIPTION_MONTHS AS NUMBER) AS SUBSCRIPTION_MONTHS,
  cast(ch.COUNTRY_CD as varchar) AS COUNTRY_CODE,
 -- cast(ch.PURCHASE_PRODUCT_ID as varchar) AS PRODUCT_ID,
  cast(ch.PRODUCT_NAME as varchar) AS PRODUCT_FULL_NAME,
  cast(ch.PRODUCT_NAME_2 as varchar) AS PRODUCT_NAME,
  cast(ch.PURCHASE_REF_ID as varchar) as PURCHASE_ID,
  cast(ch.PAYMENT_CURRENCY as varchar) as payment_currency,
  cast(ch.LANGUAGE_ID as varchar) as language_id,
  null as TCV,
  cast(ch.ACV as float) as acv,
  cast(ch.QUANTITY as float) as quantity
from 
  churn_transactions ch
  left join "DM_MARKETING"."MWB_CUSTOMER_MIGRATIONS_CDS" mi  -- remove migration
    on mi.key_id = ch.key_id
where 
  not (ch.subscription_id is null and ch.key_id is null)
  and mi.key_id is null 
  and ch.transaction_status != 'PAYMENT_AUTHORIZED'
  and not (ch.transaction_status in ('PENDING_APPROVAL', 'Pending', 'PENDING') and ch.license_type in ('RENEWAL', 'UPGRADE', 'REGULAR'))
  and not (ch.transaction_status = 'PAYMENT_RECEIVED' and ch.license_type in ('RENEWAL', 'UPGRADE', 'REGULAR'))
;

--select top 10 * from churn_transactions

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--bookings table

create or replace temporary table temp_bookings as

select distinct
  SOURCE as TRANSACTION_SOURCE,
  bo.KEY_ID,
  bo.SUBSCRIPTION_ID,
  EMAIL,
  COHORT_MONTH,
  TRANSACTION_DT as TRANSACTION_DATE,
  NEXT_BILLING_DT as ADDRESSABLE_DATE,
  PAYMENT_TYPE,
  TERRITORY,
  COHORT_NUMBER,
  COHORT_NAME,
  PRODUCT_TYPE,
  case 
    when TRANSACTION_STATUS in ('Paid', 'COMPLETE', 'Completed') then 'Paid' 
    when TRANSACTION_STATUS in ('Refunded', 'REFUND') then 'Refund' 
  else transaction_status end as transaction_status,
  SUBSCRIBER_NEW_RENEWAL_TXT AS LICENSE_TYPE,
  GROUP_NAME,
  SUBSCRIPTION_MONTHS,
  COUNTRY_CD AS COUNTRY_CODE,
  --PURCHASE_PRODUCT_ID AS PRODUCT_ID,
  bo.PRODUCT_NAME AS PRODUCT_FULL_NAME,
  bo.PRODUCT_NAME_2 AS PRODUCT_NAME,
  PURCHASE_REF_ID PURCHASE_ID,
  PAYMENT_CURRENCY,
  LANGUAGE_ID,
  TCV,
  ACV,
  bo.QUANTITY
from 
  "DM_MARKETING"."MWB_BOOKINGS_CONSUMER_CDS" bo
  left join "DM_MARKETING"."MWB_CUSTOMER_MIGRATIONS_CDS" mi
    on mi.key_id = bo.key_id
where 
  mi.key_id is null  -- removes migrations
  and not (bo.subscription_id is null and bo.key_id is null) --around 874 subs to be tackled later
;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--pick the most recent churn transactions

create or replace temporary table rno as

select
  *
from
(
  select 
    row_number() over(partition by key_id, subscription_id order by transaction_date desc) as rno_desc,
    * 
  from 
    temp_bookings 
)   
where rno_desc = 1
;


create or replace temporary table rno_churn_trans as

select 
  ct.*
from 
  rno rn
  inner join all_churn_transactions ct
    on ct.subscription_id = rn.subscription_id
    and ct.transaction_date >= rn.transaction_date 
;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--union of bookings and churn transactions

create or replace temporary table all_bookings as

select * from temp_bookings

union 

select * from rno_churn_trans
;

------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--all bookings and rno

create or replace temporary table all_bookings_rno as

select
  *
from
  (
    select 
      lead(transaction_status) over(partition by subscription_id order by transaction_date, case when license_type = 'New' then 0 else 1 end) as lead_transaction_status,
      lead(license_type) over(partition by subscription_id order by transaction_date, case when license_type = 'New' then 0 else 1 end) as lead_license_type, 
      lead(transaction_date) over(partition by subscription_id order by transaction_date, case when license_type = 'New' then 0 else 1 end) as lead_transaction_date, 
      row_number() over(partition by subscription_id order by transaction_date, case when license_type = 'New' then 0 else 1 end) as rno_asc,
      row_number() over(partition by subscription_id order by transaction_date desc) as rno_desc,
      case 
        when TRANSACTION_STATUS in ('Paid', 'COMPLETE', 'Completed') then 'Paid' 
        when TRANSACTION_STATUS is null then null
        when TRANSACTION_STATUS = '-' then '-'
        else 'Churn'
      end as sub_status,
      * 
    from 
      all_bookings
  ) 
where 
  not (rno_asc = 1 and rno_desc = 1 and transaction_status != 'Paid')
;


--------------------------------------------------------------------------------------------------------------------------------------------
--status

create or replace temporary table status_type as

select 
  arn.transaction_status as last_status,
  arn.transaction_date as last_date,
  rn.*  
from 
  all_bookings_rno rn
  left join all_bookings_rno arn 
    on rn.subscription_id = arn.subscription_id 
    --and rn.product_id = arn.product_id
    and rn.rno_desc = 2 
    and arn.rno_desc = 1
;

---------------------------------------------------------------------------------------------------------------------------------------------   
--addressables
 
 --most of the Zoura transactions need to be addressed for data quality 
 --857 Zora transactions that has transaction_status and license_type as null
 
create or replace temporary table addressable_status as

select
  case 
    when transaction_status = 'Paid' and license_type = 'Upgrade' then 'Addressable'--'Upgrade'
    when transaction_status = 'Paid' and (license_type = 'Renewal' or license_type = 'New' or license_type is null) /*for zuora*/ and (last_status is null or last_status = 'Paid') then 'Addressable'
    when transaction_status = 'Paid' and last_status != 'Paid' and last_date >= addressable_date then 'Addressable' --those subscriptions that churned after their addresable date came up. So they wil still remain an addresable up untill their addressable date
    when transaction_status != 'Paid' and rno_desc = 1 then 'Not Addressable' --last churn transactions
    when transaction_status != 'Paid' then 'Not Addressable'--anychurn transcation is not an addressable 
    when last_status is null and rno_desc = 1 and transaction_status = 'Paid' and license_type in ('New', 'Renewal', 'Upgrade') and current_date > addressable_date then 'Not Addressable' --for those that did not have any last churn transactions so no transaction came in and they are past their addressable_date
    when transaction_status = 'Paid' and last_status != 'Paid' and last_date < addressable_date then 'Not Addressable' 
   -- when (transaction_status = 'Paid' and (last_status != 'Paid')) --or last_status is not null))  --?
  end as addressable_type,
  *
from
    status_type
;


--select date_trunc('month', addressable_date), count(distinct subscription_id), sum(acv) from addressable_status where addressable_type = 'Addressable' group by 1 order by 1 

------------------------------------------------------------------------------------------------------------------------------------------------------------

--Retention

create or replace temporary table retention as 

select 
/*
  case 
    when transaction_status = 'Paid' and license_type = 'Upgrade' then 'Upgrade'
    when license_type = 'New' and transaction_status = 'Paid' then 'New'
    when transaction_status = 'Paid' and license_type in ('Renewal') then 'Retention'
    when transaction_status != 'Paid' then 'No Retention'
  end as retention_type,
  */
  
  case 
    when lead_transaction_status = 'Paid' and lead_license_type = 'Renewal' then 'Retention'
    when (lead_transaction_status = 'Paid' and lead_license_type = 'New') then 'Adressable'
    when lead_transaction_status is null and lead_transaction_date is null and transaction_status = 'Paid' and license_type in ('Upgrade', 'Renewal') and addressable_date >= current_date then 'Addressable'
    when lead_transaction_status is null and lead_transaction_date is null and transaction_status = 'Paid' and license_type in ('New') and rno_asc = 1 and rno_desc = 1 and addressable_date >= current_date then 'Addressable'
    when lead_transaction_status = 'Paid' and lead_license_type = 'Upgrade' then 'Upgrade'
    when lead_transaction_status != 'Paid' and (lead_license_type not in ('Upgrade', 'Renewal') or lead_license_type is null) then 'Not Retention' -- they had a churn transaction come through an dthis will tell us what churn type it is    
    when lead_transaction_status is null and lead_transaction_date is null and transaction_status = 'Paid' and license_type in ('Upgrade', 'Renewal') and addressable_date < current_date then 'Not Retention' --last churn transcations did not come through
    when lead_transaction_status is null and lead_transaction_date is null and transaction_status = 'Paid' and license_type in ('New') and rno_asc = 1 and rno_desc = 1 and addressable_date < current_date then 'Not Retention' --they were a new and did not have any churn transaction come through so no retention 
    --when lead_transaction_status is null and lead_transaction_date is null and transaction_status != 'Paid' then 'Churn Transaction' --and (license_type not in ('Upgrade', 'Renewal', 'New') or license_type is null) 
    when lead_transaction_status != 'Paid' and transaction_status = 'Paid' then 'Not Retention' --some transactions have refund as status but are an upgrade still its no retention 
    when transaction_status != 'Paid' then 'Churn Transaction'
  end as next_retention_type,  
  
  --lead(retention_type) over(partition by subscription_id order by transaction_date) as next_retention_type,
  lead(acv) over(partition by subscription_id order by transaction_date, case when license_type = 'New' then 0 else 1 end) as next_retention_acv,
  *  
from
 addressable_status
;

------------------------------------------------------------------------------------------------------------------------------------------------------------
--Deployment

create or replace temporary table entitlements as

select 
  key_id, 
  case when (volume_purchased is null or volume_purchased = '') then null else cast(volume_purchased as double) end as latest_volume_purchased, 
  case when (installations_count is null or installations_count = '') then null else cast(installations_count as double) end as latest_installations_count, 
  product_id, 
  case when (term_ends_on is not null and term_ends_on <> '') then to_date(term_ends_on) else null end as term_end_date
from 
  (
    select 
      key_id, 
      volume_purchased, 
      installations_count, 
      product_id, 
      term_ends_on, 
      row_number() over(partition by key_id order by updated_at desc) as rno 
    from 
        "MARVIN"."CORE_KEYSTONE_STATE"."VW_ENTITLEMENTS"
  ) e0
where rno = 1
;

---------------------------------------------------------------------------------------------------------------------------------------------------------------
create or replace temporary table deployment as

select 
  re.*,
  en.latest_volume_purchased,
  en.latest_installations_count,
  (en.latest_volume_purchased - en.latest_installations_count) as deployment
from 
  retention re
  left join entitlements en on en.key_id = re.key_id
;


------------------------------------------------------------------------------------------------------------------------------------------------------------------

--add disabled and recurring and auto renewal fields

DROP TABLE IF EXISTS dm_sandbox.addressable_retention_churn_transactions;
create table dm_sandbox.addressable_retention_churn_transactions as 

--create or replace temporary table license_code as

select  
  de.*,
  case 
    when deployment > 0 then 'Under-Deployed' 
    when deployment < 0 then 'Over-Deployed'
    when deployment = 0 and latest_volume_purchased is null then 'Not found in Keystone' 
    else 'At Par' 
  end as deployment_type,
  lcn.disabled,
  lcn.recurring
from
  deployment de
  left join 
    (
      select
        license_code, 
        disabled, --will tell if the subscription is disabled or not
        recurring   --will tell if auto renewal is enabled or not
      from
        (
          select 
            license_code, 
            disabled, 
            recurring, 
            row_number() over(partition by license_code order by date_updated desc) as rno 
          from 
            "MARVIN"."CORE_SALES"."VW_AG_LICENSE_CHANGE_NOTIFICATION"
        )
      where rno = 1
    )lcn
  on de.subscription_id = lcn.license_code
;  
